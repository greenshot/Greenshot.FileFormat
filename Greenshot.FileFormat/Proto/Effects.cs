// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Effects.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Greenshot.FileFormat.Proto {

  /// <summary>Holder for reflection information generated from Effects.proto</summary>
  public static partial class EffectsReflection {

    #region Descriptor
    /// <summary>File descriptor for Effects.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EffectsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1FZmZlY3RzLnByb3RvEhpncmVlbnNob3QuZmlsZWZvcm1hdC5wcm90bxoP",
            "QmFzZVR5cGVzLnByb3RvGgtTdHlsZS5wcm90byIyCgpCbHVyRWZmZWN0Eg4K",
            "BnJhZGl1cxgBIAEoDRIUCgxpbnZlcnRCb3VuZHMYAiABKAgiawoQRHJvcFNo",
            "YWRvd0VmZmVjdBISCgpzaGFkb3dTaXplGAEgASgNEhAKCGRhcmtuZXNzGAIg",
            "ASgCEjEKBm9mZnNldBgDIAEoCzIhLmdyZWVuc2hvdC5maWxlZm9ybWF0LnBy",
            "b3RvLlBvaW50IjkKDlBpeGVsYXRlRWZmZWN0EhEKCXBpeGVsU2l6ZRgBIAEo",
            "DRIUCgxpbnZlcnRCb3VuZHMYAiABKAgiWQoPSGlnaGxpZ2h0RWZmZWN0EjAK",
            "BWNvbG9yGAEgASgLMiEuZ3JlZW5zaG90LmZpbGVmb3JtYXQucHJvdG8uQ29s",
            "b3ISFAoMaW52ZXJ0Qm91bmRzGAIgASgIIicKD0dyYXlzY2FsZUVmZmVjdBIU",
            "CgxpbnZlcnRCb3VuZHMYASABKAgiTwoMQm9yZGVyRWZmZWN0EjAKBWNvbG9y",
            "GAEgASgLMiEuZ3JlZW5zaG90LmZpbGVmb3JtYXQucHJvdG8uQ29sb3ISDQoF",
            "d2lkdGgYAiABKA0iWQoMQWRqdXN0RWZmZWN0EhIKCmJyaWdodG5lc3MYASAB",
            "KAISEAoIY29udHJhc3QYAiABKAISDQoFZ2FtbWEYAyABKAISFAoMaW52ZXJ0",
            "Qm91bmRzGAQgASgIIh8KDU1hZ25pZnlFZmZlY3QSDgoGZmFjdG9yGAEgASgC",
            "IpkBCg5Ub3JuRWRnZUVmZmVjdBITCgt0b290aEhlaWdodBgBIAEoDRIcChRo",
            "b3Jpem9udGFsVG9vdGhSYW5nZRgCIAEoDRIaChJ2ZXJ0aWNhbFRvb3RoUmFu",
            "Z2UYAyABKA0SDAoEbGVmdBgEIAEoCBINCgVyaWdodBgFIAEoCBIOCgZib3R0",
            "b20YBiABKAgSCwoDdG9wGAcgASgIIkcKC0Nsb25lRWZmZWN0EjgKDHNvdXJj",
            "ZUJvdW5kcxgBIAEoCzIiLmdyZWVuc2hvdC5maWxlZm9ybWF0LnByb3RvLkJv",
            "dW5kcyL3BQoGRWZmZWN0EjcKCmVmZmVjdFR5cGUYASABKA4yIy5ncmVlbnNo",
            "b3QuZmlsZWZvcm1hdC5wcm90by5FZmZlY3RzEjwKCmJsdXJFZmZlY3QYCiAB",
            "KAsyJi5ncmVlbnNob3QuZmlsZWZvcm1hdC5wcm90by5CbHVyRWZmZWN0SAAS",
            "SAoQZHJvcFNoYWRvd0VmZmVjdBgLIAEoCzIsLmdyZWVuc2hvdC5maWxlZm9y",
            "bWF0LnByb3RvLkRyb3BTaGFkb3dFZmZlY3RIABJECg50b3JuRWRnZUVmZmVj",
            "dBgMIAEoCzIqLmdyZWVuc2hvdC5maWxlZm9ybWF0LnByb3RvLlRvcm5FZGdl",
            "RWZmZWN0SAASQgoNbWFnbmlmeUVmZmVjdBgNIAEoCzIpLmdyZWVuc2hvdC5m",
            "aWxlZm9ybWF0LnByb3RvLk1hZ25pZnlFZmZlY3RIABJACgxhZGp1c3RFZmZl",
            "Y3QYDiABKAsyKC5ncmVlbnNob3QuZmlsZWZvcm1hdC5wcm90by5BZGp1c3RF",
            "ZmZlY3RIABJACgxib3JkZXJFZmZlY3QYDyABKAsyKC5ncmVlbnNob3QuZmls",
            "ZWZvcm1hdC5wcm90by5Cb3JkZXJFZmZlY3RIABJGCg9ncmF5c2NhbGVFZmZl",
            "Y3QYECABKAsyKy5ncmVlbnNob3QuZmlsZWZvcm1hdC5wcm90by5HcmF5c2Nh",
            "bGVFZmZlY3RIABJGCg9oaWdobGlnaHRFZmZlY3QYESABKAsyKy5ncmVlbnNo",
            "b3QuZmlsZWZvcm1hdC5wcm90by5IaWdobGlnaHRFZmZlY3RIABJECg5waXhl",
            "bGF0ZUVmZmVjdBgSIAEoCzIqLmdyZWVuc2hvdC5maWxlZm9ybWF0LnByb3Rv",
            "LlBpeGVsYXRlRWZmZWN0SAASPgoLY2xvbmVFZmZlY3QYEyABKAsyJy5ncmVl",
            "bnNob3QuZmlsZWZvcm1hdC5wcm90by5DbG9uZUVmZmVjdEgAQggKBmVmZmVj",
            "dCqNAQoHRWZmZWN0cxIICgRCbHVyEAASDgoKRHJvcFNoYWRvdxABEgwKCFBp",
            "eGVsYXRlEAISDQoJSGlnaGxpZ2h0EAMSCgoGQm9yZGVyEAQSCwoHTWFnbmlm",
            "eRAFEg0KCUdyYXlzY2FsZRAGEgoKBkFkanVzdBAHEgwKCFRvcm5FZGdlEAgS",
            "CQoFQ2xvbmUQCUIdqgIaR3JlZW5zaG90LkZpbGVGb3JtYXQuUHJvdG9iBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Greenshot.FileFormat.Proto.BaseTypesReflection.Descriptor, global::Greenshot.FileFormat.Proto.StyleReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Greenshot.FileFormat.Proto.Effects), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Greenshot.FileFormat.Proto.BlurEffect), global::Greenshot.FileFormat.Proto.BlurEffect.Parser, new[]{ "Radius", "InvertBounds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Greenshot.FileFormat.Proto.DropShadowEffect), global::Greenshot.FileFormat.Proto.DropShadowEffect.Parser, new[]{ "ShadowSize", "Darkness", "Offset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Greenshot.FileFormat.Proto.PixelateEffect), global::Greenshot.FileFormat.Proto.PixelateEffect.Parser, new[]{ "PixelSize", "InvertBounds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Greenshot.FileFormat.Proto.HighlightEffect), global::Greenshot.FileFormat.Proto.HighlightEffect.Parser, new[]{ "Color", "InvertBounds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Greenshot.FileFormat.Proto.GrayscaleEffect), global::Greenshot.FileFormat.Proto.GrayscaleEffect.Parser, new[]{ "InvertBounds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Greenshot.FileFormat.Proto.BorderEffect), global::Greenshot.FileFormat.Proto.BorderEffect.Parser, new[]{ "Color", "Width" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Greenshot.FileFormat.Proto.AdjustEffect), global::Greenshot.FileFormat.Proto.AdjustEffect.Parser, new[]{ "Brightness", "Contrast", "Gamma", "InvertBounds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Greenshot.FileFormat.Proto.MagnifyEffect), global::Greenshot.FileFormat.Proto.MagnifyEffect.Parser, new[]{ "Factor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Greenshot.FileFormat.Proto.TornEdgeEffect), global::Greenshot.FileFormat.Proto.TornEdgeEffect.Parser, new[]{ "ToothHeight", "HorizontalToothRange", "VerticalToothRange", "Left", "Right", "Bottom", "Top" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Greenshot.FileFormat.Proto.CloneEffect), global::Greenshot.FileFormat.Proto.CloneEffect.Parser, new[]{ "SourceBounds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Greenshot.FileFormat.Proto.Effect), global::Greenshot.FileFormat.Proto.Effect.Parser, new[]{ "EffectType", "BlurEffect", "DropShadowEffect", "TornEdgeEffect", "MagnifyEffect", "AdjustEffect", "BorderEffect", "GrayscaleEffect", "HighlightEffect", "PixelateEffect", "CloneEffect" }, new[]{ "Effect" }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Possible effects
  /// </summary>
  public enum Effects {
    [pbr::OriginalName("Blur")] Blur = 0,
    [pbr::OriginalName("DropShadow")] DropShadow = 1,
    [pbr::OriginalName("Pixelate")] Pixelate = 2,
    [pbr::OriginalName("Highlight")] Highlight = 3,
    [pbr::OriginalName("Border")] Border = 4,
    [pbr::OriginalName("Magnify")] Magnify = 5,
    [pbr::OriginalName("Grayscale")] Grayscale = 6,
    [pbr::OriginalName("Adjust")] Adjust = 7,
    [pbr::OriginalName("TornEdge")] TornEdge = 8,
    [pbr::OriginalName("Clone")] Clone = 9,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Settings for the blur effect
  /// </summary>
  public sealed partial class BlurEffect : pb::IMessage<BlurEffect> {
    private static readonly pb::MessageParser<BlurEffect> _parser = new pb::MessageParser<BlurEffect>(() => new BlurEffect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlurEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Greenshot.FileFormat.Proto.EffectsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlurEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlurEffect(BlurEffect other) : this() {
      radius_ = other.radius_;
      invertBounds_ = other.invertBounds_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlurEffect Clone() {
      return new BlurEffect(this);
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 1;
    private uint radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "invertBounds" field.</summary>
    public const int InvertBoundsFieldNumber = 2;
    private bool invertBounds_;
    /// <summary>
    /// Use inverted bounds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InvertBounds {
      get { return invertBounds_; }
      set {
        invertBounds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlurEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlurEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Radius != other.Radius) return false;
      if (InvertBounds != other.InvertBounds) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Radius != 0) hash ^= Radius.GetHashCode();
      if (InvertBounds != false) hash ^= InvertBounds.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Radius != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Radius);
      }
      if (InvertBounds != false) {
        output.WriteRawTag(16);
        output.WriteBool(InvertBounds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Radius != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Radius);
      }
      if (InvertBounds != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlurEffect other) {
      if (other == null) {
        return;
      }
      if (other.Radius != 0) {
        Radius = other.Radius;
      }
      if (other.InvertBounds != false) {
        InvertBounds = other.InvertBounds;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Radius = input.ReadUInt32();
            break;
          }
          case 16: {
            InvertBounds = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Settings for the drop shadow effect
  /// </summary>
  public sealed partial class DropShadowEffect : pb::IMessage<DropShadowEffect> {
    private static readonly pb::MessageParser<DropShadowEffect> _parser = new pb::MessageParser<DropShadowEffect>(() => new DropShadowEffect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DropShadowEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Greenshot.FileFormat.Proto.EffectsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropShadowEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropShadowEffect(DropShadowEffect other) : this() {
      shadowSize_ = other.shadowSize_;
      darkness_ = other.darkness_;
      Offset = other.offset_ != null ? other.Offset.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropShadowEffect Clone() {
      return new DropShadowEffect(this);
    }

    /// <summary>Field number for the "shadowSize" field.</summary>
    public const int ShadowSizeFieldNumber = 1;
    private uint shadowSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShadowSize {
      get { return shadowSize_; }
      set {
        shadowSize_ = value;
      }
    }

    /// <summary>Field number for the "darkness" field.</summary>
    public const int DarknessFieldNumber = 2;
    private float darkness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Darkness {
      get { return darkness_; }
      set {
        darkness_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 3;
    private global::Greenshot.FileFormat.Proto.Point offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.Proto.Point Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DropShadowEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DropShadowEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShadowSize != other.ShadowSize) return false;
      if (Darkness != other.Darkness) return false;
      if (!object.Equals(Offset, other.Offset)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShadowSize != 0) hash ^= ShadowSize.GetHashCode();
      if (Darkness != 0F) hash ^= Darkness.GetHashCode();
      if (offset_ != null) hash ^= Offset.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShadowSize != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ShadowSize);
      }
      if (Darkness != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Darkness);
      }
      if (offset_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Offset);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShadowSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShadowSize);
      }
      if (Darkness != 0F) {
        size += 1 + 4;
      }
      if (offset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offset);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DropShadowEffect other) {
      if (other == null) {
        return;
      }
      if (other.ShadowSize != 0) {
        ShadowSize = other.ShadowSize;
      }
      if (other.Darkness != 0F) {
        Darkness = other.Darkness;
      }
      if (other.offset_ != null) {
        if (offset_ == null) {
          offset_ = new global::Greenshot.FileFormat.Proto.Point();
        }
        Offset.MergeFrom(other.Offset);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShadowSize = input.ReadUInt32();
            break;
          }
          case 21: {
            Darkness = input.ReadFloat();
            break;
          }
          case 26: {
            if (offset_ == null) {
              offset_ = new global::Greenshot.FileFormat.Proto.Point();
            }
            input.ReadMessage(offset_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Settings for the pixelate effect
  /// </summary>
  public sealed partial class PixelateEffect : pb::IMessage<PixelateEffect> {
    private static readonly pb::MessageParser<PixelateEffect> _parser = new pb::MessageParser<PixelateEffect>(() => new PixelateEffect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PixelateEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Greenshot.FileFormat.Proto.EffectsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PixelateEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PixelateEffect(PixelateEffect other) : this() {
      pixelSize_ = other.pixelSize_;
      invertBounds_ = other.invertBounds_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PixelateEffect Clone() {
      return new PixelateEffect(this);
    }

    /// <summary>Field number for the "pixelSize" field.</summary>
    public const int PixelSizeFieldNumber = 1;
    private uint pixelSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PixelSize {
      get { return pixelSize_; }
      set {
        pixelSize_ = value;
      }
    }

    /// <summary>Field number for the "invertBounds" field.</summary>
    public const int InvertBoundsFieldNumber = 2;
    private bool invertBounds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InvertBounds {
      get { return invertBounds_; }
      set {
        invertBounds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PixelateEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PixelateEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PixelSize != other.PixelSize) return false;
      if (InvertBounds != other.InvertBounds) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PixelSize != 0) hash ^= PixelSize.GetHashCode();
      if (InvertBounds != false) hash ^= InvertBounds.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PixelSize != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PixelSize);
      }
      if (InvertBounds != false) {
        output.WriteRawTag(16);
        output.WriteBool(InvertBounds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PixelSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PixelSize);
      }
      if (InvertBounds != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PixelateEffect other) {
      if (other == null) {
        return;
      }
      if (other.PixelSize != 0) {
        PixelSize = other.PixelSize;
      }
      if (other.InvertBounds != false) {
        InvertBounds = other.InvertBounds;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PixelSize = input.ReadUInt32();
            break;
          }
          case 16: {
            InvertBounds = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Settings for the highlight effect
  /// </summary>
  public sealed partial class HighlightEffect : pb::IMessage<HighlightEffect> {
    private static readonly pb::MessageParser<HighlightEffect> _parser = new pb::MessageParser<HighlightEffect>(() => new HighlightEffect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HighlightEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Greenshot.FileFormat.Proto.EffectsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HighlightEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HighlightEffect(HighlightEffect other) : this() {
      Color = other.color_ != null ? other.Color.Clone() : null;
      invertBounds_ = other.invertBounds_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HighlightEffect Clone() {
      return new HighlightEffect(this);
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 1;
    private global::Greenshot.FileFormat.Proto.Color color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.Proto.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "invertBounds" field.</summary>
    public const int InvertBoundsFieldNumber = 2;
    private bool invertBounds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InvertBounds {
      get { return invertBounds_; }
      set {
        invertBounds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HighlightEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HighlightEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Color, other.Color)) return false;
      if (InvertBounds != other.InvertBounds) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (color_ != null) hash ^= Color.GetHashCode();
      if (InvertBounds != false) hash ^= InvertBounds.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (color_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Color);
      }
      if (InvertBounds != false) {
        output.WriteRawTag(16);
        output.WriteBool(InvertBounds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (InvertBounds != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HighlightEffect other) {
      if (other == null) {
        return;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          color_ = new global::Greenshot.FileFormat.Proto.Color();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.InvertBounds != false) {
        InvertBounds = other.InvertBounds;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (color_ == null) {
              color_ = new global::Greenshot.FileFormat.Proto.Color();
            }
            input.ReadMessage(color_);
            break;
          }
          case 16: {
            InvertBounds = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Settings for the grayscale effect
  /// </summary>
  public sealed partial class GrayscaleEffect : pb::IMessage<GrayscaleEffect> {
    private static readonly pb::MessageParser<GrayscaleEffect> _parser = new pb::MessageParser<GrayscaleEffect>(() => new GrayscaleEffect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GrayscaleEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Greenshot.FileFormat.Proto.EffectsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrayscaleEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrayscaleEffect(GrayscaleEffect other) : this() {
      invertBounds_ = other.invertBounds_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrayscaleEffect Clone() {
      return new GrayscaleEffect(this);
    }

    /// <summary>Field number for the "invertBounds" field.</summary>
    public const int InvertBoundsFieldNumber = 1;
    private bool invertBounds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InvertBounds {
      get { return invertBounds_; }
      set {
        invertBounds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GrayscaleEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GrayscaleEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InvertBounds != other.InvertBounds) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InvertBounds != false) hash ^= InvertBounds.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InvertBounds != false) {
        output.WriteRawTag(8);
        output.WriteBool(InvertBounds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InvertBounds != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GrayscaleEffect other) {
      if (other == null) {
        return;
      }
      if (other.InvertBounds != false) {
        InvertBounds = other.InvertBounds;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InvertBounds = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BorderEffect : pb::IMessage<BorderEffect> {
    private static readonly pb::MessageParser<BorderEffect> _parser = new pb::MessageParser<BorderEffect>(() => new BorderEffect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BorderEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Greenshot.FileFormat.Proto.EffectsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderEffect(BorderEffect other) : this() {
      Color = other.color_ != null ? other.Color.Clone() : null;
      width_ = other.width_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BorderEffect Clone() {
      return new BorderEffect(this);
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 1;
    private global::Greenshot.FileFormat.Proto.Color color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.Proto.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 2;
    private uint width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BorderEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BorderEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Color, other.Color)) return false;
      if (Width != other.Width) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (color_ != null) hash ^= Color.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (color_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Color);
      }
      if (Width != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Width);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BorderEffect other) {
      if (other == null) {
        return;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          color_ = new global::Greenshot.FileFormat.Proto.Color();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (color_ == null) {
              color_ = new global::Greenshot.FileFormat.Proto.Color();
            }
            input.ReadMessage(color_);
            break;
          }
          case 16: {
            Width = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AdjustEffect : pb::IMessage<AdjustEffect> {
    private static readonly pb::MessageParser<AdjustEffect> _parser = new pb::MessageParser<AdjustEffect>(() => new AdjustEffect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdjustEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Greenshot.FileFormat.Proto.EffectsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdjustEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdjustEffect(AdjustEffect other) : this() {
      brightness_ = other.brightness_;
      contrast_ = other.contrast_;
      gamma_ = other.gamma_;
      invertBounds_ = other.invertBounds_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdjustEffect Clone() {
      return new AdjustEffect(this);
    }

    /// <summary>Field number for the "brightness" field.</summary>
    public const int BrightnessFieldNumber = 1;
    private float brightness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Brightness {
      get { return brightness_; }
      set {
        brightness_ = value;
      }
    }

    /// <summary>Field number for the "contrast" field.</summary>
    public const int ContrastFieldNumber = 2;
    private float contrast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Contrast {
      get { return contrast_; }
      set {
        contrast_ = value;
      }
    }

    /// <summary>Field number for the "gamma" field.</summary>
    public const int GammaFieldNumber = 3;
    private float gamma_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Gamma {
      get { return gamma_; }
      set {
        gamma_ = value;
      }
    }

    /// <summary>Field number for the "invertBounds" field.</summary>
    public const int InvertBoundsFieldNumber = 4;
    private bool invertBounds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InvertBounds {
      get { return invertBounds_; }
      set {
        invertBounds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdjustEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdjustEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Brightness != other.Brightness) return false;
      if (Contrast != other.Contrast) return false;
      if (Gamma != other.Gamma) return false;
      if (InvertBounds != other.InvertBounds) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Brightness != 0F) hash ^= Brightness.GetHashCode();
      if (Contrast != 0F) hash ^= Contrast.GetHashCode();
      if (Gamma != 0F) hash ^= Gamma.GetHashCode();
      if (InvertBounds != false) hash ^= InvertBounds.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Brightness != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Brightness);
      }
      if (Contrast != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Contrast);
      }
      if (Gamma != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Gamma);
      }
      if (InvertBounds != false) {
        output.WriteRawTag(32);
        output.WriteBool(InvertBounds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Brightness != 0F) {
        size += 1 + 4;
      }
      if (Contrast != 0F) {
        size += 1 + 4;
      }
      if (Gamma != 0F) {
        size += 1 + 4;
      }
      if (InvertBounds != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdjustEffect other) {
      if (other == null) {
        return;
      }
      if (other.Brightness != 0F) {
        Brightness = other.Brightness;
      }
      if (other.Contrast != 0F) {
        Contrast = other.Contrast;
      }
      if (other.Gamma != 0F) {
        Gamma = other.Gamma;
      }
      if (other.InvertBounds != false) {
        InvertBounds = other.InvertBounds;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Brightness = input.ReadFloat();
            break;
          }
          case 21: {
            Contrast = input.ReadFloat();
            break;
          }
          case 29: {
            Gamma = input.ReadFloat();
            break;
          }
          case 32: {
            InvertBounds = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MagnifyEffect : pb::IMessage<MagnifyEffect> {
    private static readonly pb::MessageParser<MagnifyEffect> _parser = new pb::MessageParser<MagnifyEffect>(() => new MagnifyEffect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MagnifyEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Greenshot.FileFormat.Proto.EffectsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MagnifyEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MagnifyEffect(MagnifyEffect other) : this() {
      factor_ = other.factor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MagnifyEffect Clone() {
      return new MagnifyEffect(this);
    }

    /// <summary>Field number for the "factor" field.</summary>
    public const int FactorFieldNumber = 1;
    private float factor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Factor {
      get { return factor_; }
      set {
        factor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MagnifyEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MagnifyEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Factor != other.Factor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Factor != 0F) hash ^= Factor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Factor != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Factor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Factor != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MagnifyEffect other) {
      if (other == null) {
        return;
      }
      if (other.Factor != 0F) {
        Factor = other.Factor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Factor = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Settings for the torn edge effect
  /// </summary>
  public sealed partial class TornEdgeEffect : pb::IMessage<TornEdgeEffect> {
    private static readonly pb::MessageParser<TornEdgeEffect> _parser = new pb::MessageParser<TornEdgeEffect>(() => new TornEdgeEffect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TornEdgeEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Greenshot.FileFormat.Proto.EffectsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TornEdgeEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TornEdgeEffect(TornEdgeEffect other) : this() {
      toothHeight_ = other.toothHeight_;
      horizontalToothRange_ = other.horizontalToothRange_;
      verticalToothRange_ = other.verticalToothRange_;
      left_ = other.left_;
      right_ = other.right_;
      bottom_ = other.bottom_;
      top_ = other.top_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TornEdgeEffect Clone() {
      return new TornEdgeEffect(this);
    }

    /// <summary>Field number for the "toothHeight" field.</summary>
    public const int ToothHeightFieldNumber = 1;
    private uint toothHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ToothHeight {
      get { return toothHeight_; }
      set {
        toothHeight_ = value;
      }
    }

    /// <summary>Field number for the "horizontalToothRange" field.</summary>
    public const int HorizontalToothRangeFieldNumber = 2;
    private uint horizontalToothRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HorizontalToothRange {
      get { return horizontalToothRange_; }
      set {
        horizontalToothRange_ = value;
      }
    }

    /// <summary>Field number for the "verticalToothRange" field.</summary>
    public const int VerticalToothRangeFieldNumber = 3;
    private uint verticalToothRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VerticalToothRange {
      get { return verticalToothRange_; }
      set {
        verticalToothRange_ = value;
      }
    }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 4;
    private bool left_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    /// <summary>Field number for the "right" field.</summary>
    public const int RightFieldNumber = 5;
    private bool right_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Right {
      get { return right_; }
      set {
        right_ = value;
      }
    }

    /// <summary>Field number for the "bottom" field.</summary>
    public const int BottomFieldNumber = 6;
    private bool bottom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bottom {
      get { return bottom_; }
      set {
        bottom_ = value;
      }
    }

    /// <summary>Field number for the "top" field.</summary>
    public const int TopFieldNumber = 7;
    private bool top_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Top {
      get { return top_; }
      set {
        top_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TornEdgeEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TornEdgeEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ToothHeight != other.ToothHeight) return false;
      if (HorizontalToothRange != other.HorizontalToothRange) return false;
      if (VerticalToothRange != other.VerticalToothRange) return false;
      if (Left != other.Left) return false;
      if (Right != other.Right) return false;
      if (Bottom != other.Bottom) return false;
      if (Top != other.Top) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ToothHeight != 0) hash ^= ToothHeight.GetHashCode();
      if (HorizontalToothRange != 0) hash ^= HorizontalToothRange.GetHashCode();
      if (VerticalToothRange != 0) hash ^= VerticalToothRange.GetHashCode();
      if (Left != false) hash ^= Left.GetHashCode();
      if (Right != false) hash ^= Right.GetHashCode();
      if (Bottom != false) hash ^= Bottom.GetHashCode();
      if (Top != false) hash ^= Top.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ToothHeight != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ToothHeight);
      }
      if (HorizontalToothRange != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(HorizontalToothRange);
      }
      if (VerticalToothRange != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(VerticalToothRange);
      }
      if (Left != false) {
        output.WriteRawTag(32);
        output.WriteBool(Left);
      }
      if (Right != false) {
        output.WriteRawTag(40);
        output.WriteBool(Right);
      }
      if (Bottom != false) {
        output.WriteRawTag(48);
        output.WriteBool(Bottom);
      }
      if (Top != false) {
        output.WriteRawTag(56);
        output.WriteBool(Top);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ToothHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ToothHeight);
      }
      if (HorizontalToothRange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HorizontalToothRange);
      }
      if (VerticalToothRange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VerticalToothRange);
      }
      if (Left != false) {
        size += 1 + 1;
      }
      if (Right != false) {
        size += 1 + 1;
      }
      if (Bottom != false) {
        size += 1 + 1;
      }
      if (Top != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TornEdgeEffect other) {
      if (other == null) {
        return;
      }
      if (other.ToothHeight != 0) {
        ToothHeight = other.ToothHeight;
      }
      if (other.HorizontalToothRange != 0) {
        HorizontalToothRange = other.HorizontalToothRange;
      }
      if (other.VerticalToothRange != 0) {
        VerticalToothRange = other.VerticalToothRange;
      }
      if (other.Left != false) {
        Left = other.Left;
      }
      if (other.Right != false) {
        Right = other.Right;
      }
      if (other.Bottom != false) {
        Bottom = other.Bottom;
      }
      if (other.Top != false) {
        Top = other.Top;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ToothHeight = input.ReadUInt32();
            break;
          }
          case 16: {
            HorizontalToothRange = input.ReadUInt32();
            break;
          }
          case 24: {
            VerticalToothRange = input.ReadUInt32();
            break;
          }
          case 32: {
            Left = input.ReadBool();
            break;
          }
          case 40: {
            Right = input.ReadBool();
            break;
          }
          case 48: {
            Bottom = input.ReadBool();
            break;
          }
          case 56: {
            Top = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Settings for the clone effect
  /// </summary>
  public sealed partial class CloneEffect : pb::IMessage<CloneEffect> {
    private static readonly pb::MessageParser<CloneEffect> _parser = new pb::MessageParser<CloneEffect>(() => new CloneEffect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloneEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Greenshot.FileFormat.Proto.EffectsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloneEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloneEffect(CloneEffect other) : this() {
      SourceBounds = other.sourceBounds_ != null ? other.SourceBounds.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloneEffect Clone() {
      return new CloneEffect(this);
    }

    /// <summary>Field number for the "sourceBounds" field.</summary>
    public const int SourceBoundsFieldNumber = 1;
    private global::Greenshot.FileFormat.Proto.Bounds sourceBounds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.Proto.Bounds SourceBounds {
      get { return sourceBounds_; }
      set {
        sourceBounds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloneEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloneEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SourceBounds, other.SourceBounds)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sourceBounds_ != null) hash ^= SourceBounds.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sourceBounds_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SourceBounds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sourceBounds_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceBounds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloneEffect other) {
      if (other == null) {
        return;
      }
      if (other.sourceBounds_ != null) {
        if (sourceBounds_ == null) {
          sourceBounds_ = new global::Greenshot.FileFormat.Proto.Bounds();
        }
        SourceBounds.MergeFrom(other.SourceBounds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (sourceBounds_ == null) {
              sourceBounds_ = new global::Greenshot.FileFormat.Proto.Bounds();
            }
            input.ReadMessage(sourceBounds_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Effect : pb::IMessage<Effect> {
    private static readonly pb::MessageParser<Effect> _parser = new pb::MessageParser<Effect>(() => new Effect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Effect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Greenshot.FileFormat.Proto.EffectsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Effect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Effect(Effect other) : this() {
      effectType_ = other.effectType_;
      switch (other.EffectCase) {
        case EffectOneofCase.BlurEffect:
          BlurEffect = other.BlurEffect.Clone();
          break;
        case EffectOneofCase.DropShadowEffect:
          DropShadowEffect = other.DropShadowEffect.Clone();
          break;
        case EffectOneofCase.TornEdgeEffect:
          TornEdgeEffect = other.TornEdgeEffect.Clone();
          break;
        case EffectOneofCase.MagnifyEffect:
          MagnifyEffect = other.MagnifyEffect.Clone();
          break;
        case EffectOneofCase.AdjustEffect:
          AdjustEffect = other.AdjustEffect.Clone();
          break;
        case EffectOneofCase.BorderEffect:
          BorderEffect = other.BorderEffect.Clone();
          break;
        case EffectOneofCase.GrayscaleEffect:
          GrayscaleEffect = other.GrayscaleEffect.Clone();
          break;
        case EffectOneofCase.HighlightEffect:
          HighlightEffect = other.HighlightEffect.Clone();
          break;
        case EffectOneofCase.PixelateEffect:
          PixelateEffect = other.PixelateEffect.Clone();
          break;
        case EffectOneofCase.CloneEffect:
          CloneEffect = other.CloneEffect.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Effect Clone() {
      return new Effect(this);
    }

    /// <summary>Field number for the "effectType" field.</summary>
    public const int EffectTypeFieldNumber = 1;
    private global::Greenshot.FileFormat.Proto.Effects effectType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.Proto.Effects EffectType {
      get { return effectType_; }
      set {
        effectType_ = value;
      }
    }

    /// <summary>Field number for the "blurEffect" field.</summary>
    public const int BlurEffectFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.Proto.BlurEffect BlurEffect {
      get { return effectCase_ == EffectOneofCase.BlurEffect ? (global::Greenshot.FileFormat.Proto.BlurEffect) effect_ : null; }
      set {
        effect_ = value;
        effectCase_ = value == null ? EffectOneofCase.None : EffectOneofCase.BlurEffect;
      }
    }

    /// <summary>Field number for the "dropShadowEffect" field.</summary>
    public const int DropShadowEffectFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.Proto.DropShadowEffect DropShadowEffect {
      get { return effectCase_ == EffectOneofCase.DropShadowEffect ? (global::Greenshot.FileFormat.Proto.DropShadowEffect) effect_ : null; }
      set {
        effect_ = value;
        effectCase_ = value == null ? EffectOneofCase.None : EffectOneofCase.DropShadowEffect;
      }
    }

    /// <summary>Field number for the "tornEdgeEffect" field.</summary>
    public const int TornEdgeEffectFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.Proto.TornEdgeEffect TornEdgeEffect {
      get { return effectCase_ == EffectOneofCase.TornEdgeEffect ? (global::Greenshot.FileFormat.Proto.TornEdgeEffect) effect_ : null; }
      set {
        effect_ = value;
        effectCase_ = value == null ? EffectOneofCase.None : EffectOneofCase.TornEdgeEffect;
      }
    }

    /// <summary>Field number for the "magnifyEffect" field.</summary>
    public const int MagnifyEffectFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.Proto.MagnifyEffect MagnifyEffect {
      get { return effectCase_ == EffectOneofCase.MagnifyEffect ? (global::Greenshot.FileFormat.Proto.MagnifyEffect) effect_ : null; }
      set {
        effect_ = value;
        effectCase_ = value == null ? EffectOneofCase.None : EffectOneofCase.MagnifyEffect;
      }
    }

    /// <summary>Field number for the "adjustEffect" field.</summary>
    public const int AdjustEffectFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.Proto.AdjustEffect AdjustEffect {
      get { return effectCase_ == EffectOneofCase.AdjustEffect ? (global::Greenshot.FileFormat.Proto.AdjustEffect) effect_ : null; }
      set {
        effect_ = value;
        effectCase_ = value == null ? EffectOneofCase.None : EffectOneofCase.AdjustEffect;
      }
    }

    /// <summary>Field number for the "borderEffect" field.</summary>
    public const int BorderEffectFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.Proto.BorderEffect BorderEffect {
      get { return effectCase_ == EffectOneofCase.BorderEffect ? (global::Greenshot.FileFormat.Proto.BorderEffect) effect_ : null; }
      set {
        effect_ = value;
        effectCase_ = value == null ? EffectOneofCase.None : EffectOneofCase.BorderEffect;
      }
    }

    /// <summary>Field number for the "grayscaleEffect" field.</summary>
    public const int GrayscaleEffectFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.Proto.GrayscaleEffect GrayscaleEffect {
      get { return effectCase_ == EffectOneofCase.GrayscaleEffect ? (global::Greenshot.FileFormat.Proto.GrayscaleEffect) effect_ : null; }
      set {
        effect_ = value;
        effectCase_ = value == null ? EffectOneofCase.None : EffectOneofCase.GrayscaleEffect;
      }
    }

    /// <summary>Field number for the "highlightEffect" field.</summary>
    public const int HighlightEffectFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.Proto.HighlightEffect HighlightEffect {
      get { return effectCase_ == EffectOneofCase.HighlightEffect ? (global::Greenshot.FileFormat.Proto.HighlightEffect) effect_ : null; }
      set {
        effect_ = value;
        effectCase_ = value == null ? EffectOneofCase.None : EffectOneofCase.HighlightEffect;
      }
    }

    /// <summary>Field number for the "pixelateEffect" field.</summary>
    public const int PixelateEffectFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.Proto.PixelateEffect PixelateEffect {
      get { return effectCase_ == EffectOneofCase.PixelateEffect ? (global::Greenshot.FileFormat.Proto.PixelateEffect) effect_ : null; }
      set {
        effect_ = value;
        effectCase_ = value == null ? EffectOneofCase.None : EffectOneofCase.PixelateEffect;
      }
    }

    /// <summary>Field number for the "cloneEffect" field.</summary>
    public const int CloneEffectFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.Proto.CloneEffect CloneEffect {
      get { return effectCase_ == EffectOneofCase.CloneEffect ? (global::Greenshot.FileFormat.Proto.CloneEffect) effect_ : null; }
      set {
        effect_ = value;
        effectCase_ = value == null ? EffectOneofCase.None : EffectOneofCase.CloneEffect;
      }
    }

    private object effect_;
    /// <summary>Enum of possible cases for the "effect" oneof.</summary>
    public enum EffectOneofCase {
      None = 0,
      BlurEffect = 10,
      DropShadowEffect = 11,
      TornEdgeEffect = 12,
      MagnifyEffect = 13,
      AdjustEffect = 14,
      BorderEffect = 15,
      GrayscaleEffect = 16,
      HighlightEffect = 17,
      PixelateEffect = 18,
      CloneEffect = 19,
    }
    private EffectOneofCase effectCase_ = EffectOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectOneofCase EffectCase {
      get { return effectCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEffect() {
      effectCase_ = EffectOneofCase.None;
      effect_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Effect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Effect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EffectType != other.EffectType) return false;
      if (!object.Equals(BlurEffect, other.BlurEffect)) return false;
      if (!object.Equals(DropShadowEffect, other.DropShadowEffect)) return false;
      if (!object.Equals(TornEdgeEffect, other.TornEdgeEffect)) return false;
      if (!object.Equals(MagnifyEffect, other.MagnifyEffect)) return false;
      if (!object.Equals(AdjustEffect, other.AdjustEffect)) return false;
      if (!object.Equals(BorderEffect, other.BorderEffect)) return false;
      if (!object.Equals(GrayscaleEffect, other.GrayscaleEffect)) return false;
      if (!object.Equals(HighlightEffect, other.HighlightEffect)) return false;
      if (!object.Equals(PixelateEffect, other.PixelateEffect)) return false;
      if (!object.Equals(CloneEffect, other.CloneEffect)) return false;
      if (EffectCase != other.EffectCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EffectType != 0) hash ^= EffectType.GetHashCode();
      if (effectCase_ == EffectOneofCase.BlurEffect) hash ^= BlurEffect.GetHashCode();
      if (effectCase_ == EffectOneofCase.DropShadowEffect) hash ^= DropShadowEffect.GetHashCode();
      if (effectCase_ == EffectOneofCase.TornEdgeEffect) hash ^= TornEdgeEffect.GetHashCode();
      if (effectCase_ == EffectOneofCase.MagnifyEffect) hash ^= MagnifyEffect.GetHashCode();
      if (effectCase_ == EffectOneofCase.AdjustEffect) hash ^= AdjustEffect.GetHashCode();
      if (effectCase_ == EffectOneofCase.BorderEffect) hash ^= BorderEffect.GetHashCode();
      if (effectCase_ == EffectOneofCase.GrayscaleEffect) hash ^= GrayscaleEffect.GetHashCode();
      if (effectCase_ == EffectOneofCase.HighlightEffect) hash ^= HighlightEffect.GetHashCode();
      if (effectCase_ == EffectOneofCase.PixelateEffect) hash ^= PixelateEffect.GetHashCode();
      if (effectCase_ == EffectOneofCase.CloneEffect) hash ^= CloneEffect.GetHashCode();
      hash ^= (int) effectCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EffectType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EffectType);
      }
      if (effectCase_ == EffectOneofCase.BlurEffect) {
        output.WriteRawTag(82);
        output.WriteMessage(BlurEffect);
      }
      if (effectCase_ == EffectOneofCase.DropShadowEffect) {
        output.WriteRawTag(90);
        output.WriteMessage(DropShadowEffect);
      }
      if (effectCase_ == EffectOneofCase.TornEdgeEffect) {
        output.WriteRawTag(98);
        output.WriteMessage(TornEdgeEffect);
      }
      if (effectCase_ == EffectOneofCase.MagnifyEffect) {
        output.WriteRawTag(106);
        output.WriteMessage(MagnifyEffect);
      }
      if (effectCase_ == EffectOneofCase.AdjustEffect) {
        output.WriteRawTag(114);
        output.WriteMessage(AdjustEffect);
      }
      if (effectCase_ == EffectOneofCase.BorderEffect) {
        output.WriteRawTag(122);
        output.WriteMessage(BorderEffect);
      }
      if (effectCase_ == EffectOneofCase.GrayscaleEffect) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(GrayscaleEffect);
      }
      if (effectCase_ == EffectOneofCase.HighlightEffect) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(HighlightEffect);
      }
      if (effectCase_ == EffectOneofCase.PixelateEffect) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(PixelateEffect);
      }
      if (effectCase_ == EffectOneofCase.CloneEffect) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(CloneEffect);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EffectType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EffectType);
      }
      if (effectCase_ == EffectOneofCase.BlurEffect) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlurEffect);
      }
      if (effectCase_ == EffectOneofCase.DropShadowEffect) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DropShadowEffect);
      }
      if (effectCase_ == EffectOneofCase.TornEdgeEffect) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TornEdgeEffect);
      }
      if (effectCase_ == EffectOneofCase.MagnifyEffect) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MagnifyEffect);
      }
      if (effectCase_ == EffectOneofCase.AdjustEffect) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdjustEffect);
      }
      if (effectCase_ == EffectOneofCase.BorderEffect) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BorderEffect);
      }
      if (effectCase_ == EffectOneofCase.GrayscaleEffect) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GrayscaleEffect);
      }
      if (effectCase_ == EffectOneofCase.HighlightEffect) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HighlightEffect);
      }
      if (effectCase_ == EffectOneofCase.PixelateEffect) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PixelateEffect);
      }
      if (effectCase_ == EffectOneofCase.CloneEffect) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CloneEffect);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Effect other) {
      if (other == null) {
        return;
      }
      if (other.EffectType != 0) {
        EffectType = other.EffectType;
      }
      switch (other.EffectCase) {
        case EffectOneofCase.BlurEffect:
          BlurEffect = other.BlurEffect;
          break;
        case EffectOneofCase.DropShadowEffect:
          DropShadowEffect = other.DropShadowEffect;
          break;
        case EffectOneofCase.TornEdgeEffect:
          TornEdgeEffect = other.TornEdgeEffect;
          break;
        case EffectOneofCase.MagnifyEffect:
          MagnifyEffect = other.MagnifyEffect;
          break;
        case EffectOneofCase.AdjustEffect:
          AdjustEffect = other.AdjustEffect;
          break;
        case EffectOneofCase.BorderEffect:
          BorderEffect = other.BorderEffect;
          break;
        case EffectOneofCase.GrayscaleEffect:
          GrayscaleEffect = other.GrayscaleEffect;
          break;
        case EffectOneofCase.HighlightEffect:
          HighlightEffect = other.HighlightEffect;
          break;
        case EffectOneofCase.PixelateEffect:
          PixelateEffect = other.PixelateEffect;
          break;
        case EffectOneofCase.CloneEffect:
          CloneEffect = other.CloneEffect;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            effectType_ = (global::Greenshot.FileFormat.Proto.Effects) input.ReadEnum();
            break;
          }
          case 82: {
            global::Greenshot.FileFormat.Proto.BlurEffect subBuilder = new global::Greenshot.FileFormat.Proto.BlurEffect();
            if (effectCase_ == EffectOneofCase.BlurEffect) {
              subBuilder.MergeFrom(BlurEffect);
            }
            input.ReadMessage(subBuilder);
            BlurEffect = subBuilder;
            break;
          }
          case 90: {
            global::Greenshot.FileFormat.Proto.DropShadowEffect subBuilder = new global::Greenshot.FileFormat.Proto.DropShadowEffect();
            if (effectCase_ == EffectOneofCase.DropShadowEffect) {
              subBuilder.MergeFrom(DropShadowEffect);
            }
            input.ReadMessage(subBuilder);
            DropShadowEffect = subBuilder;
            break;
          }
          case 98: {
            global::Greenshot.FileFormat.Proto.TornEdgeEffect subBuilder = new global::Greenshot.FileFormat.Proto.TornEdgeEffect();
            if (effectCase_ == EffectOneofCase.TornEdgeEffect) {
              subBuilder.MergeFrom(TornEdgeEffect);
            }
            input.ReadMessage(subBuilder);
            TornEdgeEffect = subBuilder;
            break;
          }
          case 106: {
            global::Greenshot.FileFormat.Proto.MagnifyEffect subBuilder = new global::Greenshot.FileFormat.Proto.MagnifyEffect();
            if (effectCase_ == EffectOneofCase.MagnifyEffect) {
              subBuilder.MergeFrom(MagnifyEffect);
            }
            input.ReadMessage(subBuilder);
            MagnifyEffect = subBuilder;
            break;
          }
          case 114: {
            global::Greenshot.FileFormat.Proto.AdjustEffect subBuilder = new global::Greenshot.FileFormat.Proto.AdjustEffect();
            if (effectCase_ == EffectOneofCase.AdjustEffect) {
              subBuilder.MergeFrom(AdjustEffect);
            }
            input.ReadMessage(subBuilder);
            AdjustEffect = subBuilder;
            break;
          }
          case 122: {
            global::Greenshot.FileFormat.Proto.BorderEffect subBuilder = new global::Greenshot.FileFormat.Proto.BorderEffect();
            if (effectCase_ == EffectOneofCase.BorderEffect) {
              subBuilder.MergeFrom(BorderEffect);
            }
            input.ReadMessage(subBuilder);
            BorderEffect = subBuilder;
            break;
          }
          case 130: {
            global::Greenshot.FileFormat.Proto.GrayscaleEffect subBuilder = new global::Greenshot.FileFormat.Proto.GrayscaleEffect();
            if (effectCase_ == EffectOneofCase.GrayscaleEffect) {
              subBuilder.MergeFrom(GrayscaleEffect);
            }
            input.ReadMessage(subBuilder);
            GrayscaleEffect = subBuilder;
            break;
          }
          case 138: {
            global::Greenshot.FileFormat.Proto.HighlightEffect subBuilder = new global::Greenshot.FileFormat.Proto.HighlightEffect();
            if (effectCase_ == EffectOneofCase.HighlightEffect) {
              subBuilder.MergeFrom(HighlightEffect);
            }
            input.ReadMessage(subBuilder);
            HighlightEffect = subBuilder;
            break;
          }
          case 146: {
            global::Greenshot.FileFormat.Proto.PixelateEffect subBuilder = new global::Greenshot.FileFormat.Proto.PixelateEffect();
            if (effectCase_ == EffectOneofCase.PixelateEffect) {
              subBuilder.MergeFrom(PixelateEffect);
            }
            input.ReadMessage(subBuilder);
            PixelateEffect = subBuilder;
            break;
          }
          case 154: {
            global::Greenshot.FileFormat.Proto.CloneEffect subBuilder = new global::Greenshot.FileFormat.Proto.CloneEffect();
            if (effectCase_ == EffectOneofCase.CloneEffect) {
              subBuilder.MergeFrom(CloneEffect);
            }
            input.ReadMessage(subBuilder);
            CloneEffect = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
